http://cybern.ru/algoritm-dejkstry-realizaciya-na-java.html

Задан ориентированный взвешенный граф G = (V, E), состоящий из N вершин и M дуг. Каждая дуга (u, v) имеет неотрицательный вес w(u, v),
w(u, v) \ge 0. Требуется найти кратчайшие пути из некоторой стартовой вершины s до всех остальных вершин графа G.
Исходный граф G удобно представлять в памяти ЭВМ списком смежности adj, храня для каждой вершины графа v список adj[v] смежных с ней вершин.
Для хранения весов дуг, соответствующих их положению в списке смежности adj, используется список смежности weight. Переменная start
обозначает стартовую вершину, от которой ищется расстояние до всех других вершин v \in V. Массив dist используется для хранения текущего
кратчайшего расстояния от стартовой вершины start до всех других вершин v \in V. Изначально полагаем, что dist[start] = 0, а для всех
остальных вершин значение массива dist равно бесконечности INF. На практике при реализации алгоритмов в качестве бесконечности INF
выбирают достаточное большое число, заведомо превосходящее длину любого пути в исходном орграфе G = (V, E). В процессе работы алгоритма
Дейкстры поддерживается множество S \subseteq V, состоящие из вершин v орграфа G, для которых кратчайшее расстояние dist[v] уже найдено.
Булевский массив used служит для реализации множества S \subseteq V и хранения информации о том, найдено ли кратчайшее расстояние от
стартовой вершины start до вершины v или еще нет. Массив pred служит для хранения предков и необходим для восстановления кратчайших путей
из стартовой вершины start до всех остальных вершин v \in V орграфа G = (V, E).

1 ArrayList<Integer> adj[]; //список смежности
2 ArrayList<Integer> weight[]; //вес ребра в орграфе
3 boolean used[]; //массив для хранения информации о пройденных и не пройденных вершинах
4 int dist[]; //массив для хранения расстояния от стартовой вершины
5 int pred[]; //массив предков, необходимых для восстановления кратчайшего пути из стартовой вершины

ArrayList<Integer> adj[]; //список смежности
ArrayList<Integer> weight[]; //вес ребра в орграфе
boolean used[]; //массив для хранения информации о пройденных и не пройденных вершинах
int dist[]; //массив для хранения расстояния от стартовой вершины
int pred[]; //массив предков, необходимых для восстановления кратчайшего пути из стартовой вершины

В качестве списка смежности для представления графа на языке Java удобно использовать массив, каждый элемент которого является структурой
данных ArrayList<Integer>.
В приведенной ниже реализации данные считываются и выводятся в консоль.

Входные данные
В первой строке входного файла задано два целых числа: N (1 \le N \le 10^5) – количество вершин в графе, M (1 \le M \le 10^6) – количество
ребер графа соответственно и стартовая вершина start (1 \le start \le N). Каждая из следующих M строк содержит описание дуги орграфа: три
целых числа – начало, конец и вес дуги. Начало и конец дуги находятся в диапазоне от 1 до N, а вес ребра – это целое не отрицательно число.

Выходные данные
В первой строке выходного файла показано расстояние из стартовой вершины start до всех остальных вершин v \in V орграфа G = (V, E) в
порядке их нумерации. Если пути из стартовой вершины start до некоторой вершины не существует, то на том месте стоит значение -1.
Далее в следующий N строках показан номер вершины и кратчайший путь до нее из стартовой вершины start. В случае, если пути до некоторой
вершины  v \in V не существует, то строка с номером v является пустой.

Входные данные
7 11 1
1 2 1
1 3 7
2 4 4
2 5 2
3 2 4
3 5 5
4 5 3
5 3 3
5 4 10
6 7 3
7 6 4
Выходные данные
0 1 6 5 3 -1 -1
1: 1
2: 1 2
3: 1 2 5 3
4: 1 2 4
5: 1 2 5
6:
7: